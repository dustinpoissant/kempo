import Component from"./Component.js";import{dispatchEvent}from"../utils/element.js";export class Tabs extends Component{constructor(){super(),this.registerAttributes({active:"",fixedHeight:!1})}async connectedCallback(){await super.connectedCallback(),this.active||(this.active=`${this.querySelectorAll("k-tab-content")[0].name}`);const t=this.shadowRoot.getElementById("tabs");t.addEventListener("scroll",this.updateScrollIndicators.bind(this)),this.updateScrollIndicators(),new ResizeObserver((()=>this.updateScrollIndicators())).observe(t);const e=this.shadowRoot.getElementById("scroll-left"),n=this.shadowRoot.getElementById("scroll-right");e.addEventListener("click",(()=>{t.scrollBy({left:-200,behavior:"smooth"})})),n.addEventListener("click",(()=>{t.scrollBy({left:200,behavior:"smooth"})}))}updateScrollIndicators(){const t=this.shadowRoot.getElementById("tabs"),e=this.shadowRoot.getElementById("scroll-left"),n=this.shadowRoot.getElementById("scroll-right"),o=t.scrollLeft>0,s=t.scrollLeft<t.scrollWidth-t.clientWidth;e.classList.toggle("visible",o),n.classList.toggle("visible",s)}attributeChangedCallback(t,e,n){if("active"===t){const t=this.getActiveTab();t&&(t.active=!1);const e=this.getActiveContent();e&&(e.active=!1);const o=this.getTab(n);o&&(o.active=!0);const s=this.getContent(n);s&&(s.active=!0),dispatchEvent(this,"tab",{tab:n})}}get contents(){return[...this.querySelectorAll(":scope > k-tab-content")]}get tabs(){return[...this.querySelectorAll(":scope > k-tab")]}getTab(t){let e;if("string"==typeof t&&(e=this.querySelector(`k-tab[for="${t}"]`)),!e){let n=parseInt(t);n||(n=0),e=this.querySelectorAll("k-tab")[n]}return e}getActiveTab(){return this.querySelector(':scope > k-tab[active="true"]')}getContent(t){let e;if("string"==typeof t&&(e=this.querySelector(`k-tab-content[name="${t}"]`)),!e){let n=parseInt(t);n||(n=0),e=this.querySelectorAll("k-tab-content")[n]}return e}getActiveContent(){return this.querySelector(':scope > k-tab-content[active="true"]')}get shadowTemplate(){return`\n      <div id="wrapper">\n        <div id="tabs-container">\n          <div id="scroll-left" class="scroll-indicator">\n            <svg class="arrow" width="20" height="20" viewBox="0 0 20 20" fill="none">\n              <path d="M12 15L7 10L12 5" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>\n            </svg>\n          </div>\n          <div id="tabs">\n            <slot name="tabs"></slot>\n          </div>\n          <div id="scroll-right" class="scroll-indicator">\n            <svg class="arrow" width="20" height="20" viewBox="0 0 20 20" fill="none">\n              <path d="M8 15L13 10L8 5" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>\n            </svg>\n          </div>\n        </div>\n        <div id="contents">\n          ${super.shadowTemplate}\n        </div>\n      </div>\n    `}get shadowStyles(){return`\n      ${super.shadowStyles}\n      :host {\n        display: block;\n        width: 100%;\n      }\n      #wrapper {\n        display: flex;\n        flex-direction: column;\n        width: 100%;\n        min-width: 0;\n      }\n      #tabs-container {\n        position: relative;\n        border-bottom: 1px solid var(--c_border);\n      }\n      #tabs {\n        display: flex;\n        overflow-x: auto;\n        overflow-y: hidden;\n      }\n      #tabs ::slotted(*) {\n        flex: 0 0 auto;\n      }\n      .scroll-indicator {\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        width: 72px;\n        pointer-events: none;\n        opacity: 0;\n        transition: opacity 0.2s;\n        display: flex;\n        align-items: center;\n        justify-content: flex-start;\n        padding-bottom: 2px;\n      }\n      .scroll-indicator .arrow {\n        color: var(--tc_base);\n        z-index: 1;\n      }\n      .scroll-indicator.visible {\n        opacity: 1;\n      }\n      #scroll-left {\n        left: 0;\n        background: linear-gradient(90deg, \n          var(--c_bg) 0%,\n          var(--c_bg) 30%,\n          transparent 100%\n        );\n      }\n      #scroll-right {\n        right: 0;\n        justify-content: flex-end;\n        background: linear-gradient(-90deg, \n          var(--c_bg) 0%,\n          var(--c_bg) 30%,\n          transparent 100%\n        );\n      }\n      :host([fixed-height="true"]) #wrapper {\n        height: 100%;\n      }\n      :host([fixed-height="true"]) #contents {\n        height: 100%;\n        flex: 1;\n        min-height: 1.35rem;\n        overflow: auto;\n      }\n    `}static observedAttributes=[...super.observedAttributes,"active"]}window.customElements.define("k-tabs",Tabs);const clickHandler=Symbol();export class Tab extends Component{constructor(){super(),this[clickHandler]=()=>{this.active||(this.tabs.active=this.for)},this.slot="tabs",this.registerAttribute("active",!1)}connectedCallback(){super.connectedCallback(),this.shadowRoot.getElementById("button").addEventListener("click",this[clickHandler])}get for(){const t=this.getAttribute("for");return t||this?.tabs.tabs.indexOf(this)}set for(t){t?this.setAttribute("for",t):this.removeAttribute("for")}get tabs(){return"K-TABS"===this.parentElement.tagName?this.parentElement:null}get shadowTemplate(){return`\n      <button id="button">\n        ${super.shadowTemplate}\n      </button>\n    `}get shadowStyles(){return"\n      :host {\n        margin-bottom: -1px;\n        flex: 0 0 auto;  /* Important: prevent shrinking and growing */\n      }\n      #button {\n        padding: var(--spacer_h);\n        background-color: transparent;\n        border: none;\n        cursor: inherit;\n        box-shadow: none;\n        color: inherit;\n        white-space: nowrap;  /* Prevent text wrapping */\n      }\n      :host(:not([active])) #button {\n        cursor: pointer;\n      }\n      :host([active]){\n        border-bottom: 2px solid var(--c_primary);\n        margin-bottom: -1px;\n      }\n      :host([active]) #button {\n        color: var(--tc_primary);\n      }\n    "}}window.customElements.define("k-tab",Tab);export class TabContent extends Component{constructor(){super(),this.registerAttribute("active",!1)}get tabs(){return"K-TABS"===this.parentElement.tagName?this.parentElement:null}get name(){const t=this.getAttribute("name");return t||this?.tabs.contents.indexOf(this)}set name(t){t?this.setAttribute("name",t):this.removeAttribute("name")}get shadowStyles(){return`\n      ${super.shadowStyles}\n      :host {\n        display: block;\n        height: 100%;\n        max-height: 100%;\n        flex: 1 1 auto;\n        overflow: auto;\n      }\n      :host([active]) {\n        display: block;\n      }\n      :host(:not([active])) {\n        display: none;\n      }\n    `}}window.customElements.define("k-tab-content",TabContent);export class TabSpacer extends Component{constructor(){super(),this.slot="tabs"}get shadowStyles(){return`\n      ${super.shadowStyles}\n      :host {\n        flex: 1 1 auto !important;\n        height: 1px;\n      }\n    `}}window.customElements.define("k-tab-spacer",TabSpacer);export default{Tab:Tab,TabContent:TabContent,Tabs:Tabs,TabSpacer:TabSpacer};