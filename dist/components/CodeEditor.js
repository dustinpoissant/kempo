import Component from"./Component.js";import{escapeHTML}from"../utils/string.js";const keyDownHandler=Symbol(),lastValue=Symbol();export default class CodeEditor extends Component{constructor(){super(),this[lastValue]="",this[keyDownHandler]=e=>{const{key:t}=e;"Tab"==t?(e.preventDefault(),document.execCommand("insertText",!1,"  ")):(e.ctrlKey||e.metaKey)&&"z"===e.key&&(e.preventDefault(),document.execCommand("undo",!1,null))},this.registerAttribute("language","")}async connectedCallback(){super.connectedCallback();this.shadowRoot.getElementById("editor").addEventListener("keydown",this[keyDownHandler]),this.addEventListener("blur",this.highlight),this.value=escapeHTML(this.textContent.trim())}disconnectedCallback(){super.disconnectedCallback(),this.shadowRoot.getElementById("editor").removeEventListener("keydown",this[keyDownHandler])}highlight(){let e;this.value!==this[lastValue]&&this.dispatchEvent(new CustomEvent("change")),e="undefined"!=typeof hljs?this.language?hljs.highlight(this.value,{language:this.language}).value:hljs.highlightAuto(this.value).value:this.value,this.shadowRoot.getElementById("editor").innerHTML=e.split("\n").map((e=>`<div class="line">${e}</div>`)).join(""),this[lastValue]=this.value}get value(){return[...this.shadowRoot.getElementById("editor").querySelectorAll(".line")].map((e=>e.textContent)).join("\n")}set value(e){this.shadowRoot.getElementById("editor").innerHTML=e.split("\n").map((e=>`<div class="line">${e}</div>`)).join(""),this.highlight()}get shadowTemplate(){return'\n      <link rel="stylesheet" href="../kempo/kempo-hljs.css" />\n      <pre id="editor" contenteditable="true"></pre>\n    '}get shadowStyles(){return`\n      ${super.shadowStyles}\n      :root {\n        --d_caret: white;\n        --l_caret: black;\n        --caret: var(--l_caret);\n      }\n      @media (prefers-color-scheme: light) { \n        :root:not([theme="dark"]) {\n          --caret: var(--l_caret);\n        }\n      }\n      :root[theme="light"] {\n        --caret: var(--l_caret);\n      }\n      @media (prefers-color-scheme: dark) {\n        :root:not([theme="light"]) {\n          --caret: var(--d_caret);\n        }\n      }\n      :root[theme="dark"] {\n        --caret: var(--d_caret);\n      }\n      :host {\n        display: block;\n        border: 1px solid var(--c_border);\n        border-radius: var(--radius);\n        max-height: 20rem;\n        overflow: auto;\n        caret-color: var(--caret);\n      }\n      :host(:focus-within){\n        box-shadow: var(--focus_shadow);\n      }\n      #editor {\n        min-height: 6rem;\n        outline: none;\n        font-family: var(--ff_mono);\n        resize: vertical;\n        padding: var(--spacer);\n        margin-bottom: 0;\n        resize: vertical;\n        counter-reset: line-number;\n        white-space: pre-wrap;\n        padding-left: 2.5rem;\n        position: relative;\n      }\n      #editor .line::before {\n        content: counter(line-number); /* Use the counter value as content */\n        counter-increment: line-number; /* Increment the counter */\n        display: inline-block;\n        width: 2rem;\n        text-align: right; /* Align numbers to the right */\n        opacity: 0.65;\n        position: absolute;\n        left: 0;\n        user-select: none;\n      }\n      .line {\n        width: 100%;\n        overflow-wrap: break-word;\n        word-break: break-all;\n      }\n    `}}window.customElements.define("k-code-editor",CodeEditor);