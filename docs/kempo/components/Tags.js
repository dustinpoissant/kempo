import Component from"./Component.js";import{onEvent,offEvent,dispatchEvent}from"../utils/element.js";const tagsInputChangeHandler=Symbol(),tagsInputCommaHandler=Symbol();export default class Tags extends Component{constructor(){super(),this[tagsInputChangeHandler]=()=>{const t=this.shadowRoot.getElementById("tagsInput"),n=t.value;n&&(this.addTag(n),t.value="")},this[tagsInputCommaHandler]=t=>{if(","===t.data||"insertFromPaste"===t.inputType){const t=this.shadowRoot.getElementById("tagsInput"),n=t.value.split(",").filter((t=>!!t));n.length&&(n.forEach((t=>this.addTag(t))),t.value="")}},this.registerAttributes({value:"",allowedTags:"",disallowedTags:""})}attributeChangedCallback(t,n,e){if(super.attributeChangedCallback(t,n,e),"value"===t){const t=this.validateTags();t!==e?this.value=t:(dispatchEvent(this,"change",{oldValue:n,newValue:e}),this.renderTags())}else if(["allowed-tags","disallowed-tags"].includes(t)){const a=this.validateTags();a!==e?this.value=a:(dispatchEvent(this,`${t.replace("-","")}change`,{oldValue:n,newValue:e}),this.renderTags())}}async render(t){if(await super.render(t)){const t=this.shadowRoot.getElementById("tagsInput");return onEvent(t,"change",this[tagsInputChangeHandler]),onEvent(t,"input",this[tagsInputCommaHandler]),!0}return!1}disconnectedCallback(){super.disconnectedCallback();const t=this.shadowRoot.getElementById("tagsInput");offEvent(t,"change",this[tagsInputChangeHandler]),offEvent(t,"input",this[tagsInputCommaHandler])}async renderTags(){this.render(!1),await window.customElements.whenDefined("k-tag");const t=this.shadowRoot.getElementById("tags");t.innerHTML="";const n=this.value;n&&n.split(",").forEach((n=>{t.appendChild(new Tag(n))}))}addTag(t){const n=new Set(this.value.split(",").filter((t=>!!t)));n.add(t),this.value=[...n].filter((t=>!!t)).join(","),dispatchEvent(this,"addtag",{tag:t})}removeTag(t){const n=new Set(this.value.split(",").filter((t=>!!t)));n.delete(t),this.value=[...n].join(","),dispatchEvent(this,"removetag",{tag:t})}validateTags(){return this.value.split(",").map((t=>t.trim())).map((t=>{const n=new Set(this.allowedTags.split(",").filter((t=>!!t)));if(n.size)return n.has(t)?t:"";const e=new Set(this.disallowedTags.split(",").filter((t=>!!t)));return e.size&&e.has(t)?"":t})).filter((t=>!!t)).join(",")}get shadowTemplate(){return`\n      <label for="tagsInput">\n        ${super.shadowTemplate}\n        <div id="tagsHolder">\n          <span id="tags"></span>\n          <input id="tagsInput" />\n        </div>\n      </label>\n    `}get shadowStyles(){return`\n      ${super.shadowStyles}\n      :host {\n        \n      }\n      #tagsHolder {\n        display: flex;\n        flex-wrap: wrap;\n        align-items: flex-start;\n        width: 100%;\n        background-color: var(--input_bg);\n        color: var(--input_tc);\n        border: var(--input_border_width) solid var(--c_border);\n        padding: 0;\n        margin-bottom: var(--spacer);\n        border-radius: var(--radius);\n        outline: none;\n        transition: box-shadow var(--animation_ms);\n        cursor: default;\n      }\n      #tagsHolder:focus-within {\n        box-shadow: var(--focus_shadow);\n      }\n      #tags {\n        display: contents;\n      }\n      #tagsInput {\n        display: inline-block;\n        min-width: 5rem;\n        width: auto;\n        max-width: 100%;\n        background-color: transparent;\n        color: inherit;\n        border: 0 solid transparent;\n        margin-bottom: 0;\n        border-radius: 0;\n        transition: none;\n      }\n      #tagsInput {\n        box-shadow: 0 0 0 transparent;\n      }\n    `}static observedAttributes=[...Component.observedAttributes,"value","allowed-tags","disallowed-tags"]}window.customElements.define("k-tags",Tags);const tagClickHandler=Symbol();class Tag extends Component{constructor(t){super(),this[tagClickHandler]=()=>{this.getRootNode().host.removeTag(t)},this.innerHTML=t}async render(t){return!!await super.render(t)&&(onEvent(this,"click",this[tagClickHandler]),!0)}disconnectedCallback(){super.disconnectedCallback(),offEvent(this,"click",this[tagClickHandler])}get shadowStyles(){return`\n      ${super.shadowStyles}\n      :host {\n        display: inline-block;\n        width: min-content;\n        margin: var(--spacer_q);\n        padding: var(--spacer_q) var(--spacer_h);\n        border: 1px solid var(--c_border);\n        border-radius: var(--radius);\n        cursor: pointer;\n      }\n      :host(:hover) {\n        text-decoration: line-through;\n      }\n    `}}window.customElements.define("k-tag",Tag);