import{spawn}from"child_process";import readline from"readline";const args={};let win={};"undefined"!=typeof window?win=window:"undefined"!=typeof global&&(win=global),win.log=(...e)=>{args.debug&&console.log(...e)};export const getArgs=(e={d:"debug"})=>{let s="",r=[];const o=()=>{s&&(0===r.length?args[s]=!0:1===r.length?"false"===r[0]?args[s]=!1:args[s]=r[0]:args[s]=r)};for(let t=2;t<process.argv.length;t++){const n=process.argv[t];n.startsWith("-")?(o(),n.startsWith("--")?s=n.slice(2):(s=n.slice(1),e[s]&&(s=e[s])),r=[]):r.push(n)}return o(),args};export const runChildProcess=e=>new Promise(((s,r)=>{const[o,...t]=e.split(" ");spawn(o,t).on("close",(e=>{0===e?s(`child process exited with code ${e}`):r(new Error(`child process exited with code ${e}`))}))}));export const runChildNodeProcess=(e,s={})=>{const r=`node ${e} ${Object.entries(s).flatMap((([e,s])=>!0===s?[`--${e}`]:[`--${e}`,s])).join(" ")}`;return runChildProcess(r)};export const promptUser=e=>{const s=readline.createInterface({input:process.stdin,output:process.stdout});return new Promise((r=>{s.question(e,(e=>{s.close(),r(e)}))}))};export default{getArgs:getArgs,runChildNodeProcess:runChildNodeProcess,runChildNodeProcess:runChildNodeProcess,promptUser:promptUser};