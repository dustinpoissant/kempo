import{spawn}from"child_process";import readline from"readline";const args={};let win={};"undefined"!=typeof window?win=window:"undefined"!=typeof global&&(win=global),win.log=(...e)=>{args.debug&&console.log(...e)};export const getArgs=(e={d:"debug"})=>{let r="",s=[];const o=()=>{r&&(0===s.length?args[r]=!0:1===s.length?"false"===s[0]?args[r]=!1:args[r]=s[0]:args[r]=s)};for(let t=2;t<process.argv.length;t++){const n=process.argv[t];n.startsWith("-")?(o(),n.startsWith("--")?r=n.slice(2):(r=n.slice(1),e[r]&&(r=e[r])),s=[]):s.push(n)}return o(),args};export const runChildProcess=e=>new Promise(((r,s)=>{const[o,...t]=e.split(" ");spawn(o,t).on("close",(e=>{0===e?r(`child process exited with code ${e}`):s(new Error(`child process exited with code ${e}`))}))}));export const runChildNodeProcess=(e,r={})=>{const s=`node ${e} ${Object.entries(r).flatMap((([e,r])=>!0===r?[`--${e}`]:[`--${e}`,r])).join(" ")}`;return runChildProcess(s)};export const promptUser=e=>{const r=readline.createInterface({input:process.stdin,output:process.stdout});return new Promise((s=>{r.question(e,(e=>{r.close(),s(e)}))}))};export const promptYN=(e,r="y")=>promptUser(`${e} [${r}] `).then((e=>{const s=e.trim().toLowerCase();return""===s?"y"===r:"y"===s}));export default{getArgs:getArgs,runChildNodeProcess:runChildNodeProcess,runChildNodeProcess:runChildNodeProcess,promptUser:promptUser,promptYN:promptYN};